// easy 1

public class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i=0; i<nums.length-1; i++){
            if(nums[i]==nums[i+1]){
                return true;
            }
        }
        return false;
    }
}

// easy 2

public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Map<Integer,Integer> map = new HashMap<Integer, Integer>();
            
        for(int i=0;i<=nums.length-1; i++){
            if(map.containsKey(nums[i])){
                if((i-map.get(nums[i])<=k)){
                    return true;
                }
            }
            
            map.put(nums[i],i);
        }
        
        return false;
    }
}

// easy 3

public class Solution {
    public boolean isHappy(int n) {
        
        int x = n, y = n;
        while(x>1){
            x=cal(x);
            if(x==1) return true;
            y=cal(cal(y));
            if(y==1) return true;
            if(x==y) return false;
        }
        
        return true;
    }
    
    public static int cal(int num){
            int res = 0;
            while(num>0){
                res = res + (num%10) * (num%10);
                num = num/10;
            }
            
            return res;
        }
}

// easy 4

public class Solution {
    public int singleNumber(int[] nums) {
        int res = 0;
        for (int i =0; i<= nums.length-1; i++){
            res = res ^ nums[i];
        }
        return res;
    }
}


// medium 1

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums.length == 0) return null;
        
        TreeNode root = convert(nums, 0, nums.length-1);
        return root;
    }
    
    public static TreeNode convert(int[] nums, int left, int right){
        if(left > right) return null;
        
        int mid = left + (right-left)/2;
        TreeNode node = new TreeNode(nums[mid]);
        node.left = convert(nums, left, mid-1);
        node.right = convert(nums, mid+1, right);
        
        return node;
    }
}


// medium 2

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        backtrack(candidates, target, 0, res, cur);
        return res;
    }
    
    private static void backtrack(int[] candidates, int target, int start, List<List<Integer>> res, List<Integer> cur){
        if(target == 0){
            res.add(new ArrayList<>(cur));
        }
        else if (target < 0) return;
        else if (target > 0){
            for(int i = start; i<candidates.length; i++){
                cur.add(candidates[i]);
                backtrack(candidates, target-candidates[i], i, res, cur);
                cur.remove(cur.size()-1);
            }
        }
    }
}


// medium 3

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
    
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        
        backtrack(candidates, target, 0, res, cur);
        
        return res;
    }
    
    private static void backtrack(int[] candidates, int target, int start, List<List<Integer>> res, List<Integer> cur){
        if(target<0) return;
        else if(target == 0){
            res.add(new ArrayList<>(cur));
        }
        else if(target > 0){
            for(int i = start; i<candidates.length; i++){
                if(i>start && candidates[i]==candidates[i-1]) continue;
                cur.add(candidates[i]);
                backtrack(candidates, target-candidates[i], i+1, res, cur);
                cur.remove(cur.size()-1);
            }
        }
    }
}


// medium 4

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        
        backtrack(res, cur, k, n, 1);
        
        return res;
    }
    
    private static void backtrack(List<List<Integer>> res, List<Integer> cur, int count, int target, int start){
        if(target < 0) return;
        else if(target == 0 && cur.size() == count){
            res.add(new ArrayList<>(cur));
        }
        else if(target > 0){
            for(int i = start; i<=9; i++){
                cur.add(i);
                backtrack(res, cur, count, target-i, i+1);
                cur.remove(cur.size()-1);
            }
        }
    }
}
